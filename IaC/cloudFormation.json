{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Serverless Group-32 IaC",
  "Resources": {




    "AuthRegistrationCodeVerifyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "code_verify",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "code_verify.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthRegistrationResendCodeLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "resend_code",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "resend_code.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthLoginCredentialsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "login_credentials",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "login_credentials.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthGetMFAStatusLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "get_mfa_status",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "get_mfa_status.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthRegisterCredentialsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "register_credentials",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "register_credentials.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthSessionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "session",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "session.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthSetCaesarCipherLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "setup_caesar_cipher",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "setup_caesar_cipher.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthSetSecurityQuestionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "setup_security_question",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "setup_security_question.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthVerifyCipherLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "verify_cipher",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "verify_cipher.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthLogoutAnswer": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "logout",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "logout.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthVerifySecurityAnswerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "verify_security_answer",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "verify_security_answer.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthAuthorizerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "authorizer",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "authorizer.py.zip"
        },
        "Timeout": 120
      }
    },
    "AuthConstantsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "constants",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "auth-serverless",
          "S3Key": "constants.py.zip"
        },
        "Timeout": 120
      }
    },


    "UserBookRoomLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "book_room",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "book_room.py.zip"
        },
        "Timeout": 120
      }
    },
    "UserBookRoomApprovalLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "book_room_approval",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "book_room_approval.py.zip"
        },
        "Timeout": 120
      }
    },
    "UserBookRoomRequestLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "book_room_request",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "book_room_request.py.zip"
        },
        "Timeout": 120
      }
    },
    "UserGetBookingsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "get_bookings",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "get_bookings.py.zip"
        },
        "Timeout": 120
      }
    },
    "UserAddFeedbackLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "add_feedback",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "add_feedback.py.zip"
        },
        "Timeout": 120
      }
    },
    "UserGetRoomDetailsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "get_room_details",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "get_room_details.py.zip"
        },
        "Timeout": 120
      }
    },
    "UserGetRoomsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "user_get_rooms",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "user_get_rooms.py.zip"
        },
        "Timeout": 120
      }
    },
    "UserValidatorLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "validator",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-user",
          "S3Key": "validator.py.zip"
        },
        "Timeout": 120
      }
    },


    "AgentCreateRoomLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "create_room",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "agent-serverless",
          "S3Key": "create_room.py.zip"
        },
        "Timeout": 120
      }
    },
    "AgentDeleteRoomLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "delete_room",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "agent-serverless",
          "S3Key": "delete_room.py.zip"
        },
        "Timeout": 120
      }
    },
    "AgentEditRoomLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "edit_room",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "agent-serverless",
          "S3Key": "edit_room.py.zip"
        },
        "Timeout": 120
      }
    },
    "AgentGetRoomsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "get_rooms",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "agent-serverless",
          "S3Key": "get_rooms.py.zip"
        },
        "Timeout": 120
      }
    },
    "AgentValidatorLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "validator",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "agent-serverless",
          "S3Key": "validator.py.zip"
        },
        "Timeout": 120
      }
    },



    "ApiStack": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "APIsSDP-32"
      }
    },
    "AuthApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "ApiStack",
            "RootResourceId"
          ]
        },
        "PathPart": "auth"
      }
    },
    "SessionApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "AuthApiResource"
        },
        "PathPart": "session"
      }
    },
    "SessionApiGETMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "SessionApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthSessionLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "SessionApiGETDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "SessionApiGETMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "SessionApiGETStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "SessionApiGETDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "SessionApiGETDeployment"
        },
        "StageName": "prod"
      }
    },
    "AuthSessionLambdaGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthSessionLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/GET/auth/session"
        }
      }
    },
    "SessionApiOPTIONSMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "SessionApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "OPTIONS",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthSessionLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "SessionApiOPTIONSDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "SessionApiOPTIONSMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "SessionApiOPTIONSStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "SessionApiOPTIONSDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "SessionApiOPTIONSDeployment"
        },
        "StageName": "sessionoptionsprod"
      }
    },
    "AuthSessionLambdaOPTIONSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthSessionLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/OPTIONS/auth/session"
        }
      }
    },
    "RegisterApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "AuthApiResource"
        },
        "PathPart": "register"
      }
    },
    "RegisterApiPOSTMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "RegisterApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthRegisterCredentialsLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "RegisterApiPOSTDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "RegisterApiPOSTMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "RegisterApiPOSTStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "RegisterApiPOSTDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "SessionApiGETDeployment"
        },
        "StageName": "register_post_prod"
      }
    },
    "RegisterLambdaPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthRegisterCredentialsLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/POST/auth/register"
        }
      }
    },
    "RegisterApiOPTIONSMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "RegisterApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "OPTIONS",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthRegisterCredentialsLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "RegisterApiOPTIONSDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "RegisterApiOPTIONSMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "RegisterApiOPTIONSStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "RegisterApiOPTIONSDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "RegisterApiOPTIONSDeployment"
        },
        "StageName": "register_options_prod"
      }
    },
    "RegisterLambdaOPTIONSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthRegisterCredentialsLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/OPTIONS/auth/register"
        }
      }
    },
    "RegisterMFAApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "RegisterApiResource"
        },
        "PathPart": "mfa"
      }
    },
    "MFASecurityQuestionApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "RegisterMFAApiResource"
        },
        "PathPart": "security-question"
      }
    },
    "MFASecurityQuestionPOSTMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "MFASecurityQuestionApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthSetSecurityQuestionLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "MFASecurityQuestionApiPOSTDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "MFASecurityQuestionPOSTMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "MFASecurityQuestionApiPOSTStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "MFASecurityQuestionApiPOSTDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "MFASecurityQuestionApiPOSTDeployment"
        },
        "StageName": "mfa_question_post_prod"
      }
    },
    "MFASecurityQuestionLambdaPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthSetSecurityQuestionLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/POST/auth/register/mfa/security-question"
        }
      }
    },
    "MFASecurityQuestionOPTIONSMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "MFASecurityQuestionApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "OPTIONS",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthSetSecurityQuestionLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "MFASecurityQuestionOPTIONSDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "MFASecurityQuestionOPTIONSMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "MFASecurityQuestionOPTIONSStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "MFASecurityQuestionOPTIONSDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "MFASecurityQuestionOPTIONSDeployment"
        },
        "StageName": "mfa_question_options_prod"
      }
    },
    "MFASecurityQuestionOPTIONSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthSetSecurityQuestionLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/OPTIONS/auth/register/mfa/security-question"
        }
      }
    },
    "MFACaesarCipherApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "RegisterMFAApiResource"
        },
        "PathPart": "caesar-cipher"
      }
    },
    "MFACaesarCipherPOSTMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "MFACaesarCipherApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthSetCaesarCipherLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "MFACaesarCipherApiPOSTDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "MFACaesarCipherPOSTMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "MFACaesarCipherApiPOSTStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "MFACaesarCipherApiPOSTDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "MFACaesarCipherApiPOSTDeployment"
        },
        "StageName": "mfa_caesar_cipher_post_prod"
      }
    },
    "MFACaesarCipherLambdaPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthSetCaesarCipherLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/POST/auth/register/mfa/caesar-cipher"
        }
      }
    },
    "MFACaesarCipherOPTIONSMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "MFACaesarCipherApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "OPTIONS",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthSetCaesarCipherLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "MFACaesarCipherOPTIONSDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "MFACaesarCipherOPTIONSMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "MFACaesarCipherOPTIONSStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "MFACaesarCipherOPTIONSDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "MFACaesarCipherOPTIONSDeployment"
        },
        "StageName": "mfa_caesar_cipher_options_prod"
      }
    },
    "MFACaesarCipherOPTIONSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthSetCaesarCipherLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/OPTIONS/auth/register/mfa/caesar-cipher"
        }
      }
    },
    "MFAStatusApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "RegisterMFAApiResource"
        },
        "PathPart": "status"
      }
    },
    "MFAStatusGETMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "MFAStatusApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,GET'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthGetMFAStatusLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "MFAStatusApiGETDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "MFAStatusGETMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "MFAStatusApiGETStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "MFAStatusApiGETDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "MFAStatusApiGETDeployment"
        },
        "StageName": "mfa_status_get_prod"
      }
    },
    "MFAStatusLambdaGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthGetMFAStatusLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/GET/auth/register/mfa/status"
        }
      }
    },
    "MFAStatusOPTIONSMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "MFAStatusApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "OPTIONS",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthGetMFAStatusLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "MFAStatusOPTIONSDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "MFAStatusOPTIONSMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "MFAStatusOPTIONSStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "MFAStatusOPTIONSDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "MFAStatusOPTIONSDeployment"
        },
        "StageName": "mfa_status_options_prod"
      }
    },
    "MFAStatusLambdaOPTIONSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthGetMFAStatusLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/OPTIONS/auth/register/mfa/status"
        }
      }
    },
    "RegisterVerifyApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "RegisterApiResource"
        },
        "PathPart": "verify"
      }
    },
    "RegisterVerifyApiPOSTMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "RegisterVerifyApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthRegistrationCodeVerifyLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "RegisterVerifyApiPOSTDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "RegisterVerifyApiPOSTMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "RegisterVerifyApiPOSTStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "RegisterVerifyApiPOSTDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "RegisterVerifyApiPOSTDeployment"
        },
        "StageName": "register_verify_post_prod"
      }
    },
    "RegisterVerifyLambdaPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthRegistrationCodeVerifyLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/POST/auth/register/verify"
        }
      }
    },
    "RegisterVerifyApiOPTIONSMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "RegisterVerifyApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "OPTIONS",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthRegistrationCodeVerifyLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "RegisterVerifyApiOPTIONSDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "RegisterVerifyApiOPTIONSMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "RegisterVerifyApiOPTIONSStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "RegisterVerifyApiOPTIONSDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "RegisterVerifyApiOPTIONSDeployment"
        },
        "StageName": "register_verify_options_prod"
      }
    },
    "RegisterVerifyLambdaOPTIONSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthRegistrationCodeVerifyLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/OPTIONS/auth/register/verify"
        }
      }
    },
    "ResendCodeApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ParentId": {
          "Ref": "RegisterApiResource"
        },
        "PathPart": "resend-code"
      }
    },
    "ResendCodeApiPOSTMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "ResendCodeApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthRegistrationResendCodeLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "ResendCodeApiPOSTDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "ResendCodeApiPOSTMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "ResendCodeApiPOSTStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "ResendCodeApiPOSTDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "ResendCodeApiPOSTDeployment"
        },
        "StageName": "resend_code_post_prod"
      }
    },
    "AuthRegistrationResendCodeLambdaPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthRegistrationResendCodeLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/POST/auth/register/resend-code"
        }
      }
    },
    "ResendCodeApiOPTIONSMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "ResendCodeApiResource"
        },
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "ApiKeyRequired": false,
        "Integration": {
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "IntegrationHttpMethod": "OPTIONS",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthRegistrationResendCodeLambda.Arn}/invocations"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": false,
              "method.response.header.Access-Control-Allow-Methods": false,
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ]
      }
    },
    "ResendCodeApiOPTIONSDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "ResendCodeApiOPTIONSMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        }
      }
    },
    "ResendCodeApiOPTIONSStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": "ResendCodeApiOPTIONSDeployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiStack"
        },
        "DeploymentId": {
          "Ref": "ResendCodeApiOPTIONSDeployment"
        },
        "StageName": "resend_code_options_prod"
      }
    },
    "AuthRegistrationResendCodeLambdaOPTIONSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthRegistrationResendCodeLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiStack}/*/OPTIONS/auth/register/verify"
        }
      }
    }
  }
}