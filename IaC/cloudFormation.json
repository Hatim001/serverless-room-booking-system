{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Serverless Group-32 IaC",
  "Resources": {
    "RegistrationCodeVerifyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "code_verify",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "code_verify.py.zip"
        },
        "Timeout": 120
      }
    },
    "CreateRoomLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "create_room",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "create_room.py.zip"
        },
        "Timeout": 120
      }
    },
    "DeleteRoomLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "delete_room",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "delete_room.py.zip"
        },
        "Timeout": 120
      }
    },
    "EditRoomLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "edit_room",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "edit_room.py.zip"
        },
        "Timeout": 120
      }
    },
    "GetMFAStatusLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "get_mfa_status",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "get_mfa_status.py.zip"
        },
        "Timeout": 120
      }
    },
    "GetRoomDetailsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "get_room_details",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "get_room_details.py.zip"
        },
        "Timeout": 120
      }
    },
    "LoginCredentialsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "login_credentials",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "login_credentials.py.zip"
        },
        "Timeout": 120
      }
    },
    "RegisterCredentialsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "register_credentials",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "register_credentials.py.zip"
        },
        "Timeout": 120
      }
    },
    "ResendCodeLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "resend_code",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "resend_code.py.zip"
        },
        "Timeout": 120
      }
    },
    "SessionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "session",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "session.py.zip"
        },
        "Timeout": 120
      }
    },
    "SetCaesarCipherLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "setup_caesar_cipher",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "setup_caesar_cipher.py.zip"
        },
        "Timeout": 120
      }
    },
    "SetSecurityQuestionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "setup_security_question",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "setup_security_question.py.zip"
        },
        "Timeout": 120
      }
    },
    "GetUserRoomsLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "user_get_rooms",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "user_get_rooms.py.zip"
        },
        "Timeout": 120
      }
    },
    "ValidatorLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "validator",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "validator.py.zip"
        },
        "Timeout": 120
      }
    },
    "VerifyCipherLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "verify_cipher",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "verify_cipher.py.zip"
        },
        "Timeout": 120
      }
    },
    "VerifySecurityAnswer": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "verify_security_answer",
        "Runtime": "python3.11",
        "Role": "arn:aws:iam::386955125831:role/LabRole",
        "Handler": "lambda/signup.handler",
        "Code": {
          "S3Bucket": "serverless-trial",
          "S3Key": "verify_security_answer.py.zip"
        },
        "Timeout": 120
      }
    },


    "AuthApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "AuthApi"
      }
    },
    "AuthApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "AuthApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "AuthApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "auth"
      }
    },
      "SessionApiResource": {
        "Type": "AWS::ApiGateway::Resource",
        "Properties": {
          "RestApiId": {
            "Ref": "AuthApiGateway"
          },
          "ParentId": {
            "Fn::GetAtt": [
              "AuthApiGateway",
              "RootResourceId"
            ]
          },
          "PathPart": "session"
        }
      },

      "SessionApiGETMethod": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "AuthorizationType": "NONE",
          "HttpMethod": "GET",
          "ResourceId": {
            "Ref": "SessionApiResource"
          },
          "RestApiId": {
            "Ref": "AuthApiGateway"
          },
          "ApiKeyRequired": false,
          "Integration": {
            "PassthroughBehavior": "WHEN_NO_TEMPLATES",
            "IntegrationHttpMethod": "GET",
            "IntegrationResponses": [
              {
                "StatusCode": "200",
                "ResponseTemplates": {
                  "application/json": ""
                },
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                  "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                  "method.response.header.Access-Control-Allow-Origin": "'*'"
                }
              }
            ],
            "Type": "AWS_PROXY",
            "Uri": {
              "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionLambda.Arn}/invocations"
            }
          },
          "MethodResponses": [
            {
              "StatusCode": "200",
              "ResponseModels": {
                "application/json": "Empty"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": false,
                "method.response.header.Access-Control-Allow-Methods": false,
                "method.response.header.Access-Control-Allow-Origin": false
              }
            }
          ]
        }
      },
      "SessionApiGETDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "DependsOn": ["SessionApiGETMethod"],
        "Properties": {
          "RestApiId": {
            "Ref": "AuthApiGateway"
          }
        }
      },
      "SessionApiGETStage": {
        "Type": "AWS::ApiGateway::Stage",
        "DependsOn": "SessionApiGETDeployment",
        "Properties": {
          "RestApiId": {
            "Ref": "AuthApiGateway"
          },
          "DeploymentId": {
            "Ref": "SessionApiGETDeployment"
          },
          "StageName": "prod"
        }
      },
      "SessionLambdaGETPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": {
            "Ref": "SessionLambda"
          },
          "Action": "lambda:InvokeFunction",
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AuthApiGateway}/*/GET/auth/session"
          }
        }
      },
      "SessionApiOPTIONSMethod": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "ResourceId": {
            "Ref": "SessionApiResource"
          },
          "RestApiId": {
            "Ref": "AuthApiGateway"
          },
          "ApiKeyRequired": false,
          "Integration": {
            "PassthroughBehavior": "WHEN_NO_TEMPLATES",
            "IntegrationHttpMethod": "OPTIONS",
            "IntegrationResponses": [
              {
                "StatusCode": "200",
                "ResponseTemplates": {
                  "application/json": ""
                },
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                  "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                  "method.response.header.Access-Control-Allow-Origin": "'*'"
                }
              }
            ],
            "Type": "AWS_PROXY",
            "Uri": {
              "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionLambda.Arn}/invocations"
            }
          },
          "MethodResponses": [
            {
              "StatusCode": "200",
              "ResponseModels": {
                "application/json": "Empty"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": false,
                "method.response.header.Access-Control-Allow-Methods": false,
                "method.response.header.Access-Control-Allow-Origin": false
              }
            }
          ]
        }
      },
      "SessionApiOPTIONSDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "DependsOn": ["SessionApiOPTIONSMethod"],
        "Properties": {
          "RestApiId": {
            "Ref": "AuthApiGateway"
          }
        }
      },
      "SessionApiOPTIONSStage": {
        "Type": "AWS::ApiGateway::Stage",
        "DependsOn": "SessionApiOPTIONSDeployment",
        "Properties": {
          "RestApiId": {
            "Ref": "AuthApiGateway"
          },
          "DeploymentId": {
            "Ref": "SessionApiOPTIONSDeployment"
          },
          "StageName": "sessionoptionsprod"
        }
      },
      "SessionLambdaOPTIONSPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": {
            "Ref": "SessionLambda"
          },
          "Action": "lambda:InvokeFunction",
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AuthApiGateway}/*/OPTIONS/auth/session"
          }
        }
      },



    "UserApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "UserApi"
      }
    },
    "UserApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "UserApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "UserApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "user"
      }
    },


    "AgentApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "AgentApi"
      }
    },
    "AgentApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "AgentApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "AgentApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "agent"
      }
    }
  }
}